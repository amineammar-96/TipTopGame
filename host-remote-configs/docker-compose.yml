version: "3.8"
services:
  gateway:
    container_name: gateway
    hostname: gateway
    image: nginx:1.21.0-alpine
    ports:
      - 80:80
      - 0.0.0.0:443:443
    restart: always
    volumes:
      - ./logs/nginx:/var/log/nginx
      - ./nginx/config-files:/etc/nginx/conf.d/config-files
      - ./certbot/www:/var/www/certbot/:ro
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./ssl-certif:/ssl-certif
      - ./certbot/conf/:/etc/nginx/ssl/:ro
    command: ["nginx", "-g", "daemon off;"]
    networks:
      - tutorial
    depends_on:
      - frontend
      - backend

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw

  db:
    image: mysql
    container_name: tutorial_db_symfony
    restart: always
    volumes:
      - db-data:/var/lib/mysql
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    networks:
      - tutorial

  phpmyadmin:
    image: phpmyadmin
    container_name: tutorial_phpmyadmin
    restart: always
    depends_on:
      - db
    ports:
      - 8080:80
    environment:
      PMA_HOST: db
    networks:
      - tutorial

  backend:
    image: ghcr.io/furious-ducks-tiptop/backend:1.0.0
    container_name: backend
    hostname: backend
    ports:
      - "8741:80"
    volumes:
      - ./php/vhosts:/etc/apache2/sites-enabled
      - ./entrypoint.sh:/var/www/entrypoint.sh:ro
      - ./log:/var/www/var/log
    env_file:
      - .env
    restart: always
    networks:
      - tutorial
    entrypoint: /var/www/entrypoint.sh

  frontend:
    image: ghcr.io/furious-ducks-tiptop/frontend:latest
    hostname: frontend
    ports:
      - "3000:3000"
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
    networks:
      - tutorial

  frontend-dev:
    image: ghcr.io/furious-ducks-tiptop/frontend-dev:latest
    container_name: frontend-dev
    hostname: frontend-dev
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
    networks:
      - tutorial

  portainer:
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer_data:/data
    ports:
      - "9000:9000"
      - "8000:8000"
    networks:
      - tutorial

networks:
  tutorial:

volumes:
  db-data:

